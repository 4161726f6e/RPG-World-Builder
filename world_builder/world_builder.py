import sys, random, getopt

def fullService(cRequest, numChars, charLevel, mvLevel, story, op_story, out):
    from characters import genFullCharacters

    cn, an, vn, v_n = genFullCharacters(cRequest, numChars, charLevel, mvLevel)

    if story == 1:
        genBasicStory(cn,an,vn,v_n)
    else:
        genFullStory(op_story, out)

def genBasicStory(cn,an,vn,v_n):
    from culture import genCulture
    from characters import genBasicCharacters    
    from plot import genPlot
    from random_elements import genRandom

    genCulture()
    genBasicCharacters(cn,an,vn,v_n)
    genPlot()
    genRandom()

def genFullStory(op_story, out):
    from plot_generator.adventure_generator import advg_main

    advg_main(op_story, out)

#######################################
#######################################
def main(argv):

    # Default setting is to only create a simple
    # story. Optional elements can be included
    # through the -o argument.
    optional = False

    # Default is no map, generate with -m
    map = False

    try:
        opts, args = getopt.getopt(argv,"hom")
    except getopt.GetoptError:
        print('For help, try: simple.py -h')
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print('\nworld_builder.py -h -o -m')
            print('-h : Display this message')
            print('-o : Include optional story elements')
            print('-m : Create a new map')
            print('\nGenerate a story for a role-playing game.')
            print('Only a basic story will be generated by default.')
            print('Include the -o argument to include detailed elements.\n')
            print('A pre-rendered map and list of place names will be used')
            print('  unless you include -m for a new map (takes a little time)')
            sys.exit()
        if opt == '-o':
            optional = True
        if opt in ("-m"):
            map = True

    if map == True:
        from world_map import map_main
        
        print("Drawing map...")
        while True:
            try:
                map_main()
            except IndexError:
                print("Just another moment...")
            else:
                break

    if optional == False:
        genBasicStory('F','F','F','F')
    else:
        from character_assets.two_e_character_generator import charClass
        charClass.append("F")

        while True:
            try:
                numChars = int(input("Enter # of PCs (default is 1): ") or "1")
                if numChars <= 0:
                    numChars = 1
                break
            except:
                print("Please enter a number or simply hit Enter to accept the default.")

        while True:
            try:
                charLevel = int(input("Enter the level of the PCs (1-20, default is 1): ") or "1")
                if not 1 <= charLevel < 21:
                    raise Exception
                break
            except:
                print("Please enter a number or simply hit Enter to accept the default.")

        print('\n\tClasses are:')
        print('\tFighter, Ranger, Wizard, Mage, Priest, Cleric, Druid, Thief, Bard, Paladin,')
        print('\tFighter/Thief, Fighter/Cleric, Fighter/Druid, Fighter/Mage, Fighter/Illusionist,')
        print('\tFighter/Mage/Cleric, Fighter/Mage/Druid, Fighter/Mage/Thief,')
        print('\tCleric/Illusionist, Cleric/Thief, Cleric/Ranger, Cleric/Mage,')
        print('\tIllusionist/Thief, Mage/Thief, or Druid/Mage\n')

        cRequest = []
        for x in range(numChars):
            req = input("Enter the class for PC #" + str(x+1) + " (default is random): ") or "F"
            while req not in charClass:
                req = input("Invalid entry for class - try again (default is random): ") or "F"
            cRequest.append(req)

        if charLevel == 20:
            dCharLevel = 20
        else:
            dCharLevel = charLevel +1

        while True:
            try:
                mvLevel = int(input("Enter the level of the master villain (default is " + str(dCharLevel) + "): ") or dCharLevel)
                if not 1 <= mvLevel < 21:
                    raise Exception
                break
            except:
                print("Please enter a number or simply hit Enter to accept the default.")

        
        
        # Ask about story generation
        while True:
            try:
                story = int(input("Generating story - enter 1 for a simple outline or 2 for a full plot (Default is 1): ") or "1")
                if not 1 <= story < 3:
                    raise Exception
                break
            except:
                print("Please enter 1, 2, or simply hit Enter to accept the default.")

        if story == 2:
            while True:
                try:
                    op_story = int(input("Enter 1 to create a standard plot or 2 to include all optional elements (default is 1): ") or "1")
                    if not 1 <= op_story < 3:
                        raise Exception
                    break
                except:
                    print("Please enter 1, 2, or simply hit Enter to accept the default.")

        if story == 1:
            op_story = 0
            out = 0
        else:
            while True:
                try:
                    out = int(input("Enter 1 to print the story to the screen or 2 to print to a JSON file (Default is 1): ") or "1")
                    if not 1 <= out < 3:
                        raise Exception
                    break
                except:
                    print("Please enter 1, 2, or simply hit Enter to accept the default.")

        if op_story == 2:
            op_story = True
        else:
            op_story = False

        if out == 2:
            out = True
        else:
            out = False

        fullService(cRequest, numChars, charLevel, mvLevel, story, op_story, out)



#======================================

if __name__ == "__main__":
    main(sys.argv[1:])